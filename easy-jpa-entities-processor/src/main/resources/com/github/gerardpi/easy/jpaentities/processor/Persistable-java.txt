
import java.util.UUID;
import java.io.Serializable;

import javax.persistence.Id;
import javax.persistence.MappedSuperclass;

/**
 * This is a base class for JPA write-once and read many times entities to be used in Spring-data.
 * It implements Spring's Persistable making it partly mutable.
 * This is not very nice, but there is no way around it, as far as I know.
 */
@MappedSuperclass
abstract class Persistable implements Serializable, org.springframework.data.domain.Persistable<UUID> {
  public static final String PROPNAME_ID = "id";
  @Id
  private final UUID id;

  @javax.persistence.Transient
  private boolean isNew = true;

  RewritablePersistable(UUID id) {
    this.id = id;
  }

  RewritablePersistable() {
    // ORM requires this default constructor
    this.id = null;
  }

  public UUID getId() {
    return this.id;
  }

  @Override
  public String toString() {
    return "id=" + id.toString();
  }

  @javax.persistence.PrePersist
  @javax.persistence.PostLoad
  void markNotNew() {
    this.isNew = false;
  }

  @Override
  public boolean isNew() {
    return isNew;
  }

  /**
   * Object equality check, this is done using the ID property of the objects.
   * Should be overriden with care, call super.equals if you want id equality
   * to count.
   */
  @SuppressWarnings("unchecked")
  @Override
  public final boolean equals(Object otherObject) {
    if (this == otherObject) {
      return true;
    }
    if (!(otherObject instanceof Persistable)) {
      return false;
    }

    Persistable otherEntity = (Persistable) otherObject;
    // Id is never null.
    return getId().equals(otherEntity.getId());
  }

  public final int hashCode() {
    // Id is never null.
    return id.hashCode();
  }
}
